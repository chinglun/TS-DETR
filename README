# TS-DETR:Traffic Sign Detection based on Positive and Negative Sample Augmentation


## Introduction


# In this paper, we present a novel collaborative hybrid assignments training scheme, namely Co-DETR, to learn more efficient and effective DETR-based detectors from versatile label assignment manners. 
# 1. **Encoder optimization**: The proposed training scheme can easily enhance the encoder's learning ability in end-to-end detectors by training multiple parallel auxiliary heads supervised by one-to-many label assignments. 
# 2. **Decoder optimization**: We conduct extra customized positive queries by extracting the positive coordinates from these auxiliary heads to improve attention learning of the decoder. 
# 3. **State-of-the-art performance**: Co-DETR with [ViT-L](https://github.com/baaivision/EVA/tree/master/EVA-02) (304M parameters) is **the first model to achieve 66.0 AP on COCO test-dev.**


### Install
We implement TS-DETR using [MMDetection V2.25.3](https://github.com/open-mmlab/mmdetection/releases/tag/v2.25.3) and [MMCV V1.5.0](https://github.com/open-mmlab/mmcv/releases/tag/v1.5.0).


### Data
The COCO dataset and LVIS dataset should be organized as:
```
Co-DETR
└── TT100K
    ├── coco
    │   ├── annotations
    │   │      ├── instances_train2017.json
    │   │      └── instances_val2017.json
    │   ├── train2017
    │   └── val2017
    │
   TWTSDB
    ├── coco
    │   ├── annotations
    │   │      ├── instances_train2017.json
    │   │      └── instances_val2017.json
    │   ├── train2017
    │   └── val2017
    │    
```

### Training
Train TS-DETR in TWTSDB
bash tools/dist_train.sh projects/configs/co_deformable_detr/MutiAugment98.py 1 TWTSDB/
Train using slurm:


### Testing
Test Co-Deformable-DETR + ResNet-50 with 8 GPUs, and evaluate:
```shell
bash tools/dist_test.sh  projects/configs/co_deformable_detr/MutiAugment98.py  TWTSDB/latest.pth 1 --eval bbox 
```



